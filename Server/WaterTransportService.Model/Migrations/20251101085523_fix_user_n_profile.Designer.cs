// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WaterTransportService.Model.Context;

#nullable disable

namespace WaterTransportService.Model.Migrations
{
    [DbContext(typeof(WaterTransportDbContext))]
    [Migration("20251101085523_fix_user_n_profile")]
    partial class fix_user_n_profile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WaterTransportService.Model.Entities.OldPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("old_passwords");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("PortTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("port_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("PortTypeId");

                    b.ToTable("ports");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.PortImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.ToTable("port_images");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.PortType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("port_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Marine"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Riverine"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Estuaries"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Riverbed"
                        },
                        new
                        {
                            Id = 5,
                            Title = "BucketPools"
                        },
                        new
                        {
                            Id = 6,
                            Title = "Closed"
                        },
                        new
                        {
                            Id = 7,
                            Title = "FormedByPiers"
                        });
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RegularCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("arrived_at");

                    b.Property<DateTime>("DepartureAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("departure_at");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("regular_calendars");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RegularOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_passengers");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("order_date");

                    b.Property<Guid>("RegularCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("total_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RegularCalendarId");

                    b.HasIndex("UserId");

                    b.ToTable("regular_orders");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RentCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("HighTimeLimit")
                        .HasColumnType("timestamptz")
                        .HasColumnName("high_time_limit");

                    b.Property<DateTime>("LowerTimeLimit")
                        .HasColumnType("timestamptz")
                        .HasColumnName("lower_time_limit");

                    b.Property<Guid>("ShipId")
                        .HasColumnType("uuid")
                        .HasColumnName("ship_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.HasIndex("UserId");

                    b.ToTable("rent_calendars");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RentOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_passengers");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("order_date");

                    b.Property<Guid>("RentCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_calendar_id");

                    b.Property<DateTime?>("RentalEndTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("rental_end_time");

                    b.Property<DateTime>("RentalStartTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("rental_start_time");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("total_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RentCalendarId");

                    b.HasIndex("UserId");

                    b.ToTable("rent_orders");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<Guid?>("ShipId")
                        .HasColumnType("uuid")
                        .HasColumnName("ship_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ShipId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Cost")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<TimeSpan?>("DurationMinutes")
                        .HasColumnType("interval")
                        .HasColumnName("duration_minutes");

                    b.Property<Guid>("FromPortId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_port_id");

                    b.Property<Guid>("ShipId")
                        .HasColumnType("uuid")
                        .HasColumnName("ship_id");

                    b.Property<Guid?>("ToPortId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_port_id");

                    b.HasKey("Id");

                    b.HasIndex("FromPortId");

                    b.HasIndex("ShipId");

                    b.HasIndex("ToPortId");

                    b.ToTable("routes");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<long?>("CostPerHour")
                        .HasColumnType("bigint")
                        .HasColumnName("cost_per_hour");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("max_speed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uuid")
                        .HasColumnName("port_id");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("registration_number");

                    b.Property<int>("ShipTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.Property<DateTime?>("YearOfManufacture")
                        .HasColumnType("timestamptz")
                        .HasColumnName("year_of_manufacture");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.HasIndex("ShipTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ships");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.ShipImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ShipId")
                        .HasColumnType("uuid")
                        .HasColumnName("ship_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ship_images");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.ShipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ship_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yacht"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sailboat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Motorboat"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ferry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JetSki"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Barge"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tugboat"
                        },
                        new
                        {
                            Id = 8,
                            Name = "RubberDinghy"
                        });
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamptz")
                        .HasColumnName("locked_until");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("uploaded_at");

                    b.Property<Guid?>("UserProfileUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("user_images");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uuid");

                    b.Property<string>("About")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("about");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("last_name");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("location");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("nickname");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("patronymic");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.ToTable("users_profiles");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.OldPassword", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("OldPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Port", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.PortType", "PortType")
                        .WithMany("Ports")
                        .HasForeignKey("PortTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortType");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.PortImage", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Port", "Port")
                        .WithMany("PortImages")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RegularCalendar", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("RegularCalendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RegularOrder", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.RegularCalendar", "RegularCalendar")
                        .WithMany()
                        .HasForeignKey("RegularCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("RegularOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegularCalendar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RentCalendar", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.User", null)
                        .WithMany("RentCalendars")
                        .HasForeignKey("UserId");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.RentOrder", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.RentCalendar", "RentCalendar")
                        .WithMany()
                        .HasForeignKey("RentCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("RentOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentCalendar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Review", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.User", "Author")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.Ship", "Ship")
                        .WithMany("Reviews")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Ship");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Route", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Port", "FromPort")
                        .WithMany()
                        .HasForeignKey("FromPortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.Port", "ToPort")
                        .WithMany()
                        .HasForeignKey("ToPortId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromPort");

                    b.Navigation("Ship");

                    b.Navigation("ToPort");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Ship", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Port", "Port")
                        .WithMany("Ships")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.ShipType", "ShipType")
                        .WithMany("Ships")
                        .HasForeignKey("ShipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithMany("Ships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");

                    b.Navigation("ShipType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.ShipImage", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.Ship", "Ship")
                        .WithMany("ShipImages")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.UserImage", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.UserProfile", null)
                        .WithMany("UserImages")
                        .HasForeignKey("UserProfileUserId");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.UserProfile", b =>
                {
                    b.HasOne("WaterTransportService.Model.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("WaterTransportService.Model.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Port", b =>
                {
                    b.Navigation("PortImages");

                    b.Navigation("Ships");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.PortType", b =>
                {
                    b.Navigation("Ports");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.Ship", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ShipImages");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.ShipType", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.User", b =>
                {
                    b.Navigation("OldPasswords");

                    b.Navigation("ReceivedReviews");

                    b.Navigation("RegularCalendars");

                    b.Navigation("RegularOrders");

                    b.Navigation("RentCalendars");

                    b.Navigation("RentOrders");

                    b.Navigation("Reviews");

                    b.Navigation("Ships");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("WaterTransportService.Model.Entities.UserProfile", b =>
                {
                    b.Navigation("UserImages");
                });
#pragma warning restore 612, 618
        }
    }
}
